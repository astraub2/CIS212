import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

public class simplePrimeServer {
	public static ObjectOutputStream outputToClient;
    public static ObjectInputStream inputFromClient;
    private static ArrayList<Integer> primes=new ArrayList<Integer>();
    private static ArrayList<Integer> numbers=new ArrayList<Integer>();
    
    public static void main(String[] args) throws IOException, ClassNotFoundException{
    	
    	ServerSocket serverSocket = new ServerSocket(7000);
    	Socket socket = serverSocket.accept();
		
    	
    	
        outputToClient = new ObjectOutputStream(socket.getOutputStream());
        // Create an input stream from the socket
        inputFromClient = new ObjectInputStream(socket.getInputStream());
        try{
        while(true)  {
        	// Read from input
        	ArrayList<Integer> input = (ArrayList<Integer>) inputFromClient.readObject();
        	for( int i=0; i<input.size(); i++){
                if(input.get(i)>0)
                	numbers.add(input.get(i));
                if (isPrime(input.get(i))) {
                    primes.add(input.get(i));
                }
                if (input.get(i).equals(-1)) {
                	outputToClient.writeObject(primes);
                	outputToClient.flush();
            
                }
    	
        	}
    	
    } } catch (IOException e) {
        log("Error handling client# "+ ": " + e);
    } catch (ClassNotFoundException e) {
		e.printStackTrace();
	} finally {
        try {
            socket.close();
        } catch (IOException e) {
            log("Couldn't close a socket, what's going on?");
        }
        log("Connection with client# " + " closed");
    }
}
    
    private static void log(String message) {
        System.out.println(message);
    }

    public static boolean isPrime(int n) {
    	if(n<0)
    		return false;
    	if(n > 2 && (n & 1) == 0)
    		return false;

    	for(int i = 3; i * i <= n; i += 2)
        	{if (n % i == 0) 
        		return false;
        	}
    	return true;
    }
}


