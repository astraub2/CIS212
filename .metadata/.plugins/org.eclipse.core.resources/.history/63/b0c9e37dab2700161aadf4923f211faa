
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;


public class PrimesServer {

    
    public static void main(String[] args) throws Exception {
        System.out.println("The primefinder server is running.");
        int clientNumber = 0;
        
        ServerSocket listener = new ServerSocket(9898);
        try {
            while (true) {
                new Capitalizer(listener.accept(), clientNumber++).start();
            }
        } finally {
            listener.close();
        }
    }

    private static class Capitalizer extends Thread {
        private Socket socket;
        private int clientNumber;
        private ArrayList<Integer> primes=new ArrayList<Integer>();
        private ArrayList<Integer> numbers=new ArrayList<Integer>();
        

        public Capitalizer(Socket socket, int clientNumber) {
            this.socket = socket;
            this.clientNumber = clientNumber;
            log("New connection with client# " + clientNumber + " at " + socket);
        }

        
        public void run() {
            try {

               
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(socket.getInputStream()));
                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

                out.println("Hello, welcome to the prime finder!");
                out.println("Enter a -1 to display results\n");

                while (true) {
                	
                    Integer input = Integer.parseInt(in.readLine());
                    if(input>0)
                    	numbers.add(input);
                    if (isPrime(input)) {
                        primes.add(input);
                    }
                    if (input.equals(-1)) {
                    	out.println("Primes: "+primes+" All numbers:  "+numbers+" Press enter to close");
                    	
                    	socket.close();
                    }
                    
                    
                    out.println(input.toString());
                	
                }
            } catch (IOException e) {
                log("Error handling client# " + clientNumber + ": " + e);
            } finally {
                try {
                    socket.close();
                } catch (IOException e) {
                    log("Couldn't close a socket, what's going on?");
                }
                log("Connection with client# " + clientNumber + " closed");
            }
        }

        
        private void log(String message) {
            System.out.println(message);
        }
        public boolean isPrime(int n) {
        	if(n<0)
        		return false;
            if(n > 2 && (n & 1) == 0)
               return false;
     
            for(int i = 3; i * i <= n; i += 2)
                if (n % i == 0) 
                    return false;
            return true;
        }
    }
}