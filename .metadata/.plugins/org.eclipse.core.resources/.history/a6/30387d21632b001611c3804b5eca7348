import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Server {
	private static final int PORT = 8000;
	
	public static void main(String[] args) {		
		System.out.println("running server!");
		
		ServerSocket serverSocket = null;
		Socket socket = null;
		ObjectOutputStream outputStream = null;
		ObjectInputStream inputStream = null;
		try {
			serverSocket = new ServerSocket(8000);

			System.out.println("bound server socket!");

			socket = serverSocket.accept(); 

			System.out.println("connected socket!");	
			
			// Create and flush output stream first to prevent
			// input stream from blocking.
			outputStream = new ObjectOutputStream(socket.getOutputStream());
			outputStream.flush();
			
			inputStream = new ObjectInputStream(socket.getInputStream());
			
			System.out.println("created streams!");	

			String message = inputStream.readUTF();
			System.out.println("client says: " + message);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// Use finally so that resources are closed regardless of whether
			// or not we hit an exception.
			try {
				if (serverSocket != null) {
					serverSocket.close();
				}
				if (socket != null) {
					socket.close();
				}
				if (outputStream != null) {
					outputStream.close();
				}
				if (inputStream != null) {
					inputStream.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		System.out.println("server done!");	
	}
}